package cipher;

import java.math.BigInteger;
import java.util.Random;

/**
 * Represents securely key exchange over a public channel, includes Elgamal 
 * signature algorithm thats ensure protection from attack Man-In-The-Middle.
 */
public class DiffieHellman 
{	
	/** Cryptographic key generated by algorithm */ 
	private BigInteger key;
	/** Byte representation of key */
	private byte[] keyBytes;
	
	/** p - public big prime number, the same for both key exchangers*/
	private BigInteger primePublic;
	/** g - public number - generator of multiplicative group, the same for both key exchangers*/
	private BigInteger generatorPublic;
	/** a - private  number, only first users know it*/
	private BigInteger privateValue;
	/** A - calculated number from private a (A = (g^a)mod(p))*/
	private BigInteger sendingValue;
	/** B - received calculated number by second user*/
	private BigInteger receivedValue;
	/** y1 - received signature of B (part1)*/
	private BigInteger receivedSignature1;
	/** y2 - received signature of B (part2) */
	private BigInteger receivedSignature2;
	
	/** Elgamal signature inner instance */
	private ElGamalSignature elgamal;

	/** Authorization - checking that signature via Elgamal of received B via Diffie-Hellman value is correct */
	private boolean authorized;
	private boolean keyFromREC = true;
	/** Constructor */
	public DiffieHellman()
	{
		elgamal = new ElGamalSignature();
		authorized = false;
	}

	/** Generating p and g values, setting Elgamal p=p and d=g values */
	public void generatePublicVars() 
	{
		primePublic = new BigInteger("87A8E61DB4B6663CFFBBD19C651959998CEEF608660DD0F2" +
				"5D2CEED4435E3B00E00DF8F1D61957D4FAF7DF4561B2AA30" +
				"16C3D91134096FAA3BF4296D830E9A7C209E0C6497517ABD" +
				"5A8A9D306BCF67ED91F9E6725B4758C022E0B1EF4275BF7B" +
				"6C5BFC11D45F9088B941F54EB1E59BB8BC39A0BF12307F5C" +
				"4FDB70C581B23F76B63ACAE1CAA6B7902D52526735488A0E" +
				"F13C6D9A51BFA4AB3AD8347796524D8EF6A167B5A41825D9" +
				"67E144E5140564251CCACB83E6B486F6B3CA3F7971506026" +
				"C0B857F689962856DED4010ABD0BE621C3A3960A54E710C3" +
				"75F26375D7014103A4B54330C198AF126116D2276E11715F" +
				"693877FAD7EF09CADB094AE91E1A1597",16);
		generatorPublic = new BigInteger("3FB32C9B73134D0B2E77506660EDBD484CA7B18F21EF2054" +
				"07F4793A1A0BA12510DBC15077BE463FFF4FED4AAC0BB555" +
				"BE3A6C1B0C6B47B1BC3773BF7E8C6F62901228F8C28CBB18" +
				"A55AE31341000A650196F931C77A57F2DDF463E5E9EC144B" +
				"777DE62AAAB8A8628AC376D282D6ED3864E67982428EBC83" +
				"1D14348F6F2F9193B5045AF2767164E1DFC967C1FB3F2E55" +
				"A4BD1BFFE83B9C80D052B985D182EA0ADB2A3B7313D3FE14" +
				"C8484B1E052588B9B7D2BBD2DF016199ECD06E1557CD0915" +
				"B3353BBB64E0EC377FD028370DF92B52C7891428CDC67EB6" +
				"184B523D1DB246C32F63078490F00EF8D647D148D4795451" +
				"5E2327CFEF98C582664B4C0F6CC41659",16);
		
		elgamal.setPublicBigPrime(primePublic);
		elgamal.setPublicGenerator(generatorPublic);
	}

	/** Generating Diffie-Hellman :  a value, calculating A value and 
	 * setting Elgamal :  generating t, counting b=d^t(modp), generating k, counting k' */
	public void randomizePrivateValue() 
	{
		Random randomizer = new Random();
		do 
		{
			privateValue = new BigInteger(primePublic.bitLength(), randomizer);
		} while (privateValue.compareTo(primePublic.subtract(new BigInteger("1"))) > 0);

		calculateSendingValue();
		elgamal.generatePrivateValue();
		elgamal.countPublicValue();
		elgamal.randomPrivateValue();
	}
	
	/** Calculating A=(g^a)modp value */
	public void calculateSendingValue()
	{
		sendingValue = generatorPublic.modPow(privateValue, primePublic);
	}
	
	/** Calculating key=(B^a)modp value , getting bytes of result and initializing keyBytes value*/
	public void generateKey() 
	{
		key = receivedValue.modPow(privateValue, primePublic);
		if(keyFromREC)
			key = new BigInteger(key.toString(16).substring(1,32),16).setBit(248);
		keyBytes = key.toByteArray();
	}
	
	/** Uses elgamal methods to check equation d^M = (b^y1 * y1^y2) (modp) */
	public void checkSignature() {
		/** d^M (modp) = g^B (modp) */
		BigInteger left = elgamal.checkSignatureLeft(receivedValue);
		/** b^y1 * y1^y2 (modp) */
		BigInteger right = elgamal.checkSignatureRight(receivedSignature1, receivedSignature2);
		if(left.equals(right))
			authorized = true;
	}

	/** Signing sending value calculating y1,y2 from A via Elgamal methods */
	public void makeSignature()
	{
		elgamal.countSendingValues(sendingValue);
	}

	/** Setting p and g and Elgamal p and d values from given arguments 
	 * @param p public big prime number
	 * @param g public multiplicative group generator
	 */
	public void setPublicVars(BigInteger p, BigInteger g) 
	{
		this.primePublic = p;
		this.generatorPublic = g;
		elgamal.setPublicBigPrime(this.primePublic);
		elgamal.setPublicGenerator(this.generatorPublic);
	}
	
	// GETTERS AND SETTERS
	public void setReceivedValue(BigInteger B) 
	{
		this.receivedValue = B;
	}
	
	public BigInteger getReceivedValue()
	{
		return this.receivedValue;
	}

	public String getP() 
	{
		return primePublic.toString();
	}

	public String getG() 
	{
		return generatorPublic.toString();
	}

	public String getA() 
	{
		return sendingValue.toString();
	}
	
	public void setA(BigInteger A)
	{
		this.sendingValue = A;
	}

	public byte[] getKeyBytes() 
	{
		return keyBytes;
	}

	public void setReceivedSignature1(BigInteger receivedSignature1) 
	{
		this.receivedSignature1 = receivedSignature1;
	}

	public void setReceivedSignature2(BigInteger receivedSignature2) 
	{
		this.receivedSignature2 = receivedSignature2;
	}

	public ElGamalSignature getElgamal() 
	{
		return elgamal;
	}

	public boolean isAuthorized() 
	{
		return authorized;
	}

	public void setPrivateValue(BigInteger privateValue) 
	{
		this.privateValue = privateValue;
		keyFromREC = false;
	}

	public BigInteger getSendingValue() 
	{
		return sendingValue;
	}

	public BigInteger getKey() 
	{
		return key;
	}

	public void setAuthorized(boolean authorized) {
		this.authorized = authorized;
	}
}
